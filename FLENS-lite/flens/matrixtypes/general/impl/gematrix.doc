==title:GeMatrix{flens::GeMatrix}==

Implementation of a general matrix type around a
{@@flens::storage#FullStorage}{Full Storage Scheme} using the 
{@@concept::BridgePattern}{bridge pattern}.

==ul:begin==
-> Class [GeMatrix] is derived from class
   {@@flens::GeneralMatrix}{GeneralMatrix}
   which is derived from
   {@@flens::Matrix}{Matrix}.
   ==latex==
   \begin{figure}[h]
       \centering
       \psset{xunit=0.95cm,yunit=0.95cm}
       \begin{pspicture}(0,0)(4,5)
       \rput(0,0){\textcolor{white}{.}}
       \rput(4,5){\textcolor{white}{.}}

       \psframe(0,4)(4,5)
       \rput(2,4.5){Matrix}

       \psline{->}(2,3)(2,4)
       \psframe(0,2)(4,3)
       \rput(2,2.5){GeneralMatrix}

       \psline{->}(2,1)(2,2)
       \psframe(0,0)(4,1)
       \rput(2,0.5){GeMatrix}

       \end{pspicture}
   \end{figure}
   ====
-> Class [GeMatrix] is defined in [namespace flens].
-> Class [GeMatrix] supports {@@concept::View}{views}.
-> Browse header file: [@header]
-> Browse implementation: [@tccimpl]
-> Other matrix types based on the
   {@@flens::storage#FullStorage}{full storage scheme}
   are:
-->  {@@flens::HeMatrix}{HeMatrix}
-->  {@@flens::SyMatrix}{SyMatrix}
-->  {@@flens::TrMatrix}{TrMatrix}
==ul:end==


==section:Template Parameters==
The declaration of [GeMatrix] reads
==code:.cc==
template <typename FS>
    class GeMatrix;
====
with template parameter [FS] specifying a
{@@flens::storage#FullStorage}{full storage scheme}.

==section:Public Typedefs==

Plenty of typedefs are defined that are useful for generic programming:
==list:begin==
->[Engine]:                 Underlying 
                            {@@flens::storage#FullStorage}{full storage scheme}.
->[ElementType]:            Element type
->[IndexType]:              Index type
->[]: \&nbsp;
->[IndexVariable]:          Type of index variable for creating element closures.
                            See the 
                            {@@tutorial::matrix::init::indexvariable}{tutorials}
                            for an example.
->[]: \&nbsp;
->[ConstVectorView]:        Type for constant [DenseVector] views 
                            (e.g. for referencing row or column parts)
->[VectorView]:             [DenseVector] view
->[Vector]:                 [DenseVector] with dedicated memory
                            (i.e. storing copies)
->[]: \&nbsp;
->[ConstView]:              Type for constant [GeMatrix] views
->[View]:                   Type for [GeMatrix] views
->[NoView]:                 [GeMatrix]  matrix with dedicated memory
                            (i.e. storing copies)
->[]: \&nbsp;
->[ConstHermitianView]:     Type for constant [HeMatrix] views
->[HermitianView]:          Type for [HeMatrix] views
->[HermitianNoView]:        [HeMatrix] matrix with dedicated memory
                            (i.e. storing copies)
->[]: \&nbsp;
->[ConstSymmetricView]:     Type for constant [SyMatrix] views
->[SymmetricView]:          Type for [SyMatrix] views
->[SymmetricNoView]:        Type for a [SyMatrix]  matrix with dedicated memory
                            (i.e. storing copies)
->[]: \&nbsp;
->[ConstTriangularView]:    Type for constant [TrMatrix] views
->[TriangularView]:         Type for [TrMatrix] views
->[TriangularNoView]:       Type for a [TrMatrix] matrix with dedicated memory
                            (i.e. storing copies)
==list:end==


==section:Constructors==

==subsection:Construct Empty Matrix==
==coderef==
GeMatrix();
====
Constructs an empty matrix.

==subsection:Construct Matrix with Given Dimensions==
==coderef==
GeMatrix(IndexType numRows, IndexType numCols);
====
Constructs a matrix with a given number of rows and columns.

==subsection:Construct Matrix with Given Dimensions and Index Bases==
==coderef==
GeMatrix(IndexType numRows, IndexType numCols,
         IndexType firstRow, IndexType firstCol);
====
Constructs a matrix with a given number of rows and columns and given index
bases for rows and columns.

==subsection:Construct from a Full Storage Scheme==
==coderef==
GeMatrix(const FS &fs);
====
Constructs a matrix from a given
{@@flens::storage#FullStorage}{full storage scheme}.

==subsection:Copy Constructor==
==coderef==
GeMatrix(const GeMatrix &rhs);
====
Constructs a matrix from a given [GeMatrix].

==subsection:Construct from GeMatrix with Different Storage Scheme==
==coderef==
template <typename RHS>
    GeMatrix(const GeMatrix<RHS> &rhs);
====
Constructs a matrix from [rhs] which is a [GeMatrix] based on a
different storage scheme. Requires that storage scheme [RHS] can be
converted to [FS].


==subsection:Construct from non-constant GeMatrix with Different Storage Scheme==
==coderef==
template <typename RHS>
    GeMatrix(GeMatrix<RHS> &rhs);
====
Constructs a matrix from [rhs] which is a [GeMatrix] based on a
different storage scheme. Requires that storage scheme [RHS] can be
converted to [FS].

This constructor is needed for instance when non-const views are created from
regular matrices:
==code:.cc==
typedef GeMatrix<FullStorage<double> >          Matrix;
typedef GeMatrix<FullStorageView<double> >      MatrixView;

Matrix       A(5,5);
MatrixView   B = A;  // calls the above constructor
====


==subsection:Construct from Matrix==
==coderef==
template <typename RHS>
    GeMatrix(const Matrix<RHS> &rhs);
====
Constructs a general matrix from [rhs] which can be any matrix derived from base
class {@@flens::Matrix}{Matrix}.  Requires that an appropriate
{@@flens::blas::copy}{copy} function exists for initialization.

I.e. the constructor must be able to initialize itself by
calling [blas::copy(rhs.impl(), *this)].




==section:Operators==

==subsection:Fill (Assignment of a Scalar Value)==
==coderef==
GeMatrixInitializer<FS>
operator=(const ElementType &value);
====
Fills the matrix with [value].

In addition serves as an list initializer. (TODO)

==subsection:Copy (Assignment of a GeMatrix)==
==coderef==
GeMatrix &
operator=(const GeMatrix &rhs);
====
Copies elements of [rhs] by calling
{@@flens::blas::copy#GeMatrix}{blas::copy(rhs, *this)}. Hence the matrix
might get resized (whether this is possible depends on the underlying storage
scheme).


==subsection:Copy (Assignment of a Matrix)==
==coderef==
template <typename RHS>
    GeMatrix &
    operator=(const Matrix<RHS> &rhs);
====
Copies elements of [rhs] by calling [blas::copy(rhs, *this)]. Requires that 
an appropriate [copy] function exists for the implementation of [rhs].
Hence the matrix might get resized  (whether this is possible depends on the
underlying storage scheme).


==subsection:Plus-Assign==
==coderef==
template <typename RHS>
    GeMatrix &
    operator+=(const Matrix<RHS> &rhs);
====
Adds matrix [rhs].  Requires that an appropriate [blas::axpy] function exists
for the implementation of [rhs].


==subsection:Minus-Assign==
==coderef==
template <typename RHS>
    GeMatrix &
    operator-=(const Matrix<RHS> &rhs);
====
Subtracts matrix [rhs].  Requires that an appropriate [blas::axpy] function
exists for the implementation of [rhs].


==subsection:Component-wise Multiplication (Scaling)==
==coderef==
GeMatrix &
operator*=(const ElementType &alpha);
====
Multiplies all elements by [alpha]. Calls function
{@@flens::blas::scal#GeMatrix}{blas::scal}.

==subsection:Component-wise Division (Scaling)==
==coderef==
GeMatrix &
operator/=(const ElementType &alpha);
====
Divides all elements by [alpha]. Calls function
{@@flens::blas::scal#GeMatrix}{blas::scal}.


==subsection:Element Access (const)==
==coderef==
const ElementType &
operator()(IndexType row, IndexType col) const;
====
Returns the element indexed by [(row, col)].

==subsection:Element Access==
==coderef==
ElementType &
operator()(IndexType row, IndexType col);
====
Returns the element indexed by [(row, col)].




==section:Methods==

==subsection:Number of Rows==
==coderef==
IndexType
numRows() const;
====
Returns the number of rows.


==subsection:Number of Columns==
==coderef==
IndexType
numCols() const;
====
Returns the number of columns.


==subsection:First Valid Row Index==
==coderef==
IndexType
firstRow() const;
====
Returns the first valid row index.


==subsection:Last Valid Row Index==
==coderef==
IndexType
lastRow() const;
====
Returns the last valid row index.


==subsection:First Valid Column Index==
==coderef==
IndexType
firstCol() const;
====
Returns the first valid column index.


==subsection:Last Valid Column Index==
==coderef==
IndexType
lastCol() const;
====
Returns the last valid column index.




==section:Views#views==
==subsection:Upper Triangular View (const)==
==coderef==
ConstTriangularView
upper() const;
====
Returns a constant triangular view referencing the upper triangular part.


==subsection:Upper Triangular View==
==coderef==
TriangularView
upper();
====
Returns a triangular view referencing the upper triangular part.

==subsection:Upper Triangular View with Unit Diagonal (const)==
==coderef==
ConstTriangularView
upperUnit() const;
====
Returns a constant triangular view referencing the upper triangular part.
The triangular view assumes diagonal elements all equal one.

==subsection:Upper Triangular View with Unit Diagonal==
==coderef==
TriangularView
upperUnit();
====
Returns a triangular view referencing the upper triangular part.
The triangular view assumes diagonal elements all equal one.


==subsection:Lower Triangular View (const)==
==coderef==
ConstTriangularView
lower() const;
====
Returns a constant triangular view referencing the lower triangular part.


==subsection:Lower Triangular View==
==coderef==
TriangularView
lower();
====
Returns a triangular view referencing the lower triangular part.


==subsection:Lower Triangular View with Unit Diagonal (const)==
==coderef==
ConstTriangularView
lowerUnit() const;
====
Returns a constant triangular view referencing the lower triangular part.
The triangular view assumes diagonal elements all equal one.


==subsection:Lower Triangular View with Unit Diagonal==
==coderef==
TriangularView
lowerUnit();
====
Returns a triangular view referencing the lower triangular part.
The triangular view assumes diagonal elements all equal one.




==section:Accessing the Implementation==

==subsection:Accessing the Storage Scheme (const)#engine==
==coderef==
const FS &
engine() const;
====
Returns a constant reference to the underlying storage scheme.


==subsection:Accessing the Storage Scheme==
==coderef==
FS &
engine();
====
Returns a reference to the underlying storage scheme.
