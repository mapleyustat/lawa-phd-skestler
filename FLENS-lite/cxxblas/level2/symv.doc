==title:symv{cxxblas::symv}==
==ul:begin==
-> Computation of matrix-vector products.
-> More precisely, function [symv] computes matrix-vector products of the
   form
        ==latex==
        y \leftarrow \beta y + \alpha A x
        ====
   where [alpha] and [beta] are scalars, [x] and [y] are vectors and
   [A] is a symmetric matrix.
-> Matrix [A] is a symmetric matrix
   whose elements are stored in a
   {@@cxxblas::concepts::fullstorage}{full storage scheme}
   either in {@@cxxblas::concepts::storageorder}{row- or column major order}.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==


==section:Generic Implementation==
For function [symv] the interface of the generic implementation reads:
==coderef==
template <typename IndexType, typename ALPHA, typename MA, typename VX,
          typename BETA, typename VY>
    void
    symv(StorageOrder order, StorageUpLo upLo,
         IndexType n,
         const ALPHA &alpha,
         const MA *A, IndexType ldA,
         const VX *x, IndexType incX,
         const BETA &beta,
         VY *y, IndexType incY);
====

==subsection:Template Types==
==list:begin==
->[IndexType]:  Size and index type for matrix [A] and vectors [x], [y]
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         Type of elements in matrix [A]
->[VX]:         Type of elements in vector [x]
->[BETA]:       Type of the scaling factor [beta]
->[VY]:         Type of elements in vector [y]
==list:end==

==subsection:Arguments==
==list:begin==
->[order]:  {@@cxxblas::typedefs#StorageOrder}{Enum constant} specifying the 
            {@@cxxblas::concepts::storageorder}{storage order} of matrix [A]
->[upLp]:   {@@cxxblas::typedefs#StorageUpLo}{Enum constant} specifies whether
            elements of the symmetric matrices are located in either the
            upper or lower part of the underlying full storage scheme.
->[m]:      Number of rows of matrix [A]
->[n]:      Number of columns of matrix [A]
->[alpha]:  scaling factor [alpha]
->[A]:      Pointer to the first element of matrix [A]
->[ldA]:    {@@cxxblas::concepts::fullstorage#LeadingDimension}{Leading dimension}
            of matrix [A]
->[x]:      Pointer to the first element of vector [x]
->[incX]:   stride between elements in vector [x]
->[beta]:   scaling factor [beta]
->[y]:      Pointer to the first element of vector [y]
->[incY]:   stride between elements in vector [y]
==list:end==

==section:Native BLAS==
==ul:begin==
-> Function [symv] is overloaded for for matrix/vector element types 
   [float] and [double]
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:float==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    symv(StorageOrder order, StorageUpLo upLo,
         IndexType n, float alpha,
         const float *A, IndexType ldA,
         const float *x, IndexType incX,
         float beta,
         float *y, IndexType incY);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/ssymv.f}{ssymv (Netlib)}
==ul:end==

==subsection:double==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    symv(StorageOrder order, StorageUpLo upLo,
         IndexType n, double alpha,
         const double *A, IndexType ldA,
         const double *x, IndexType incX,
         double beta,
         double *y, IndexType incY);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dsymv.f}{dsymv (Netlib)}
==ul:end==
