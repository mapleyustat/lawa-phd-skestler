==title:blas::mv{flens::blas::mv}==
==ul:begin==
-> Computation of matrix-vector products.
-> The general interface for this operation depends on the involved matrix
   types as documented in the sections below.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==

==section:Products with General Matrix Types#general==
The common interface for this type of operation reads:
==coderef==
template <typename ALPHA, typename MA, typename VX, typename BETA, typename VY>
    void
    mv(cxxblas::Transpose trans,
       const ALPHA &alpha, const GeneralMatrix<MA> &A, const Vector<VX> &x,
       const BETA &beta, Vector<VY> &y);
====
==ul:begin==
-> Function [mv] computes one matrix-vector product of the form
--> [$y \leftarrow \beta y + \alpha A x$] or
--> [$y \leftarrow \beta y + \alpha A^T x$] or
--> [$y \leftarrow \beta y + \alpha A^H x$]
-> where
--> [A] is a general (i.e. not necessarily square or symmetric) matrix
--> {@@cxxblas::typedefs#Transpose}{[transA]} specifies
    [$\text{op}(A) \in \{A, A^T, A^H\}$]
==ul:end==
Note that classes {@@flens::GeneralMatrix}{[GeneralMatrix]}
and {@@flens::Vector} are both abstract. Function [mv] casts matrix [A]
and vectors [x], [y] to their actual implementation and calls a specialized
implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection: GeMatrix and DenseVector (gemv)==
For matrices of type {@@flens::GeMatrix} and vectors of
type {@@flens::DenseVector} the following specialized interface
is provided:
==coderef==
template <typename ALPHA, typename MA, typename VX, typename BETA, typename VY>
    void
    mv(cxxblas::Transpose trans,
       const ALPHA &alpha, const GeMatrix<MA> &A, const DenseVector<VX> &x,
       const BETA &beta, DenseVector<VY> &y);
====

Template Types:
==list:begin==
->[ALPHA]:  Type of the scaling factor [alpha]
->[MA]:     {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[VX]:     {@@flens::storage#Array}{Array storage scheme} of vector [x]
->[BETA]:   Type of the scaling factor [beta]
->[VY]:     {@@flens::storage#Array}{Array storage scheme} of vector [y]
==list:end==

Parameters:
==list:begin==
->[trans]:  Enumeration {@@cxxblas::typedefs#Transpose}{constant} specifying the
            type of {@@flens::blas::mv#general}{[mv]} operation to be performed
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::GeMatrix}{General} matrix [A]
->[x]:      {@@flens::DenseVector}{Dense} vector [x]
->[beta]:   Scaling factor [beta]
->[y]:      {@@flens::DenseVector}{Dense} vector [y]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::gemv}{[cxxblas::gemv]}
-> Vector [y] gets resized if possible (i.e. if [y] is not a vector view
   or [beta] equals zero).
==ul:end==

==section:Products with Hermitian Matrix Types#hermitian==
The common interface for this type of operation reads:
==coderef==
template <typename ALPHA, typename MA, typename VX, typename BETA, typename VY>
    void
    mv(const ALPHA &alpha, const HermitianMatrix<MA> &A, const Vector<VX> &x,
       const BETA &beta, Vector<VY> &y);
====
==ul:begin==
-> Function [mv] computes a matrix-vector of the form
   [$y \leftarrow \beta y + \alpha A x$]
   where [A] is a hermitian matrix
==ul:end==
Note that classes {@@flens::HermitianMatrix}{[HermitianMatrix]}
and {@@flens::Vector} are both abstract. Function [mv] casts matrix [A]
and vectors [x], [y] to their actual implementation and calls a specialized
implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection: HeMatrix and DenseVector (hemv)==
For matrices of type {@@flens::HeMatrix} and vectors of
type {@@flens::DenseVector} the following specialized interface is provided:
==coderef==
template <typename ALPHA, typename MA, typename VX, typename BETA, typename VY>
    void
    mv(const ALPHA &alpha, const HeMatrix<MA> &A, const DenseVector<VX> &x,
       const BETA &beta, DenseVector<VY> &y);
====

Template Types:
==list:begin==
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[VX]:         {@@flens::storage#Array}{Array storage scheme} of vector [x]
->[BETA]:       Type of the scaling factor [beta]
->[VY]:         {@@flens::storage#Array}{Array storage scheme} of vector [y]
==list:end==

Parameters:
==list:begin==
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::HeMatrix}{Hermitian} matrix [A]
->[x]:      {@@flens::DenseVector}{Dense} vector [x]
->[beta]:   Scaling factor [beta]
->[y]:      {@@flens::DenseVector}{Dense} vector [y]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::hemv}{[cxxblas::hemv]}
-> Vector [y] gets resized if possible (i.e. if [y] is not a vector view
   or [beta] equals zero).
==ul:end==


==section:Products with Symmetric Matrix Types#symmetric==
The common interface for this type of operation reads:
==coderef==
template <typename ALPHA, typename MA, typename VX, typename BETA, typename VY>
    void
    mv(const ALPHA &alpha, const SymmetricMatrix<MA> &A, const Vector<VX> &x,
       const BETA &beta, Vector<VY> &y);
====
==ul:begin==
-> Function [mv] computes a matrix-vector of the form
   [$y \leftarrow \beta y + \alpha A x$]
   where [A] is a symmetric matrix
==ul:end==
Note that classes {@@flens::SymmetricMatrix}{[SymmetricMatrix]}
and {@@flens::Vector} are both abstract. Function [mv] casts matrix [A]
and vectors [x], [y] to their actual implementation and calls a specialized
implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection: SyMatrix and DenseVector (symv)==
For matrices of type {@@flens::SyMatrix} and vectors of
type {@@flens::DenseVector} the following specialized interface is provided:
==coderef==
template <typename ALPHA, typename MA, typename VX, typename BETA, typename VY>
    void
    mv(const ALPHA &alpha, const SyMatrix<MA> &A, const DenseVector<VX> &x,
       const BETA &beta, DenseVector<VY> &y);
====

Template Types:
==list:begin==
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[VX]:         {@@flens::storage#Array}{Array storage scheme} of vector [x]
->[BETA]:       Type of the scaling factor [beta]
->[VY]:         {@@flens::storage#Array}{Array storage scheme} of vector [y]
==list:end==

Parameters:
==list:begin==
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::SyMatrix}{Symmetric} matrix [A]
->[x]:      {@@flens::DenseVector}{Dense} vector [x]
->[beta]:   Scaling factor [beta]
->[y]:      {@@flens::DenseVector}{Dense} vector [y]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::symv}{[cxxblas::symv]}
-> Vector [y] gets resized if possible (i.e. if [y] is not a vector view
   or [beta] equals zero).
==ul:end==


==section:Products with Triangular Matrix Types==
The common interface for this type of operation reads:
==coderef==
template <typename MA, typename VX>
    void
    mv(cxxblas::Transpose trans,  const TriangularMatrix<MA> &A, Vector<VX> &x);
====
==ul:begin==
-> Function [mv] computes one matrix-vector of the form
--> [$x \leftarrow A x$] or
--> [$x \leftarrow A^T x$] or
--> [$x \leftarrow A^H x$] where [A] is a triangular matrix
==ul:end==
Note that classes {@@flens::TriangularMatrix}{[TriangularMatrix]}
and {@@flens::Vector} are both abstract. Function [mv] casts matrix [A]
and vector [x] to their actual implementation and calls a specialized
implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection: TrMatrix and DenseVector (trmv)==
For matrices of type {@@flens::TrMatrix} and vectors of
type {@@flens::DenseVector} the following specialized interface is provided:
==coderef==
template <typename MA, typename VX>
    void
    mv(cxxblas::Transpose trans, const TrMatrix<MA> &A, DenseVector<VX> &x);
====
Template Types:
==list:begin==
->[MA]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[VX]:         {@@flens::storage#Array}{Array storage scheme} of vector [x]
==list:end==

Parameters:
==list:begin==
->[trans]:  {@@cxxblas::typedefs#Transpose}{specifies}
            [$\text{op}(A) \in \{A, A^T, A^H\}$].
->[A]:      {@@flens::TrMatrix}{Triangular} matrix [A]
->[x]:      {@@flens::DenseVector}{Dense} vector [x]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::trmv}{[cxxblas::trmv]}
-> The length of vector [x] is required to equal the dimension of matrix [A].
-> Vector [x] gets overwritten with the result of the operation.
==ul:end==
