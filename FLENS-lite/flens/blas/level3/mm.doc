==title:blas::mm{flens::blas::mm}==

==ul:begin==
-> Computation of matrix-matrix products.
-> The general interface for this operation depends on the involved matrix
   types as documented in the sections below.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==


==section:Product of General Matrices#general==
The common interface for this type of operation reads:
==coderef==
template <typename ALPHA, typename MA, typename MB, typename BETA, typename MC>
    void
    mm(cxxblas::Transpose transA, cxxblas::Transpose transB,
       const ALPHA &alpha,
       const GeneralMatrix<MA> &A, const GeneralMatrix<MB> &B,
       const BETA &beta,
       GeneralMatrix<MC> &C);
====
==ul:begin==
-> Function [mm] computes one matrix-matrix product of the form
   ==latex==
   C  \leftarrow \alpha \, \text{op}(A) \, \text{op}(B)  + \beta C
   ====
   where
--> [A], [B] and [C] are all general (i.e. not necessarily square
    or symmetric) matrices.
--> {@@cxxblas::typedefs#Transpose}{[transA]} specifies
    [$\text{op}(A) \in \{A, A^T, A^H\}$] and
--> {@@cxxblas::typedefs#Transpose}{[transB]} specifies
    [$\text{op}(B) \in \{B, B^T, B^H\}$].
==ul:end==
Note that class {@@flens::GeneralMatrix}{[GeneralMatrix]} is abstract.
Function [mm] casts matrices [A] and [B] to their actual implementation
and calls a specialized implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection:GeMatrix-GeMatrix (gemm)==
For matrices of type {@@flens::GeMatrix} the following specialized interface
is provided:
==coderef==
template <typename ALPHA, typename MA, typename MB, typename BETA, typename MC>
    void
    mm(cxxblas::Transpose transA, cxxblas::Transpose transB,
       const ALPHA &alpha,
       const GeMatrix<MA> &A, const GeMatrix<MB> &B,
       const BETA &beta,
       GeMatrix<MC> &C);
====
Template Types:
==list:begin==
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[MB]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [B]
->[BETA]:       Type of the scaling factor [beta]
->[MC]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [C]
==list:end==

Parameters:
==list:begin==
->[transA]: Enumeration {@cxxblas::typedefs#Transpose}{constant} specifying the
            type of {@@flens::blas::mm#general}{[mm]} operation to be performed
->[transB]: Enumeration {@cxxblas::typedefs#Transpose}{constant} specifying the
            type of {@@flens::blas::mm#general}{[mm]} operation to be performed
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::GeMatrix}{General} matrix [A]
->[B]:      {@@flens::GeMatrix}{General} matrix [B]
->[beta]:   Scaling factor [beta]
->[C]:      {@@flens::GeMatrix}{General} matrix [C]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::gemm}{[cxxblas::gemm]}
-> Matrix [C] gets resized if possible (i.e. if [C] is not a matrix view
   or [beta] equals zero).
==ul:end==


==section:Product of Hermitian and General Matrices#hermitian==
The common interface for this type of operation reads:
==coderef==
template <typename ALPHA, typename MA, typename MB, typename BETA, typename MC>
    void
    mm(cxxblas::Side side,
       const ALPHA &alpha,
       const HermitianMatrix<MA> &A, const GeneralMatrix<MB> &B,
       const BETA &beta, GeneralMatrix<MC> &C);
====
==ul:begin==
-> Function [mm] computes one matrix-matrix product of the form
-->[$ C  \leftarrow \alpha \, A \, B  + \beta C $] or
-->[$ C  \leftarrow \alpha \, B \, A  + \beta C $]
-> where
--> [A] is a hermitian matrix and [B], [C] are general (i.e. not necessarily
    square or symmetric) matrices.
--> {@@cxxblas::typedefs#Side}{[side==cxxblas::Left]} specifies
    [$ C  \leftarrow \alpha \, A \, B  + \beta C $]
--> {@@cxxblas::typedefs#Side}{[side==cxxblas::Right]} specifies
    [$ C  \leftarrow \alpha \, B \, A  + \beta C $]
==ul:end==
Note that classes {@@flens::GeneralMatrix}{[GeneralMatrix]} and
{@@flens::HermitianMatrix}{[HermitianMatrix]} are both abstract.
Function [mm] casts matrices [A] and [B] to their actual implementation
and calls a specialized implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection:HeMatrix-GeMatrix (hemm)==
For matrices of type {@@flens::HeMatrix} and {@@flens::GeMatrix} the following
specialized interface is provided:
==coderef==
template <typename ALPHA, typename MA, typename MB, typename BETA, typename MC>
    void
    mm(cxxblas::Side side,
       const ALPHA &alpha, const HeMatrix<MA> &A, const GeMatrix<MB> &B,
       const BETA &beta, GeMatrix<MC> &C);
====
Template Types:
==list:begin==
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[MB]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [B]
->[BETA]:       Type of the scaling factor [beta]
->[MC]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [C]
==list:end==

Parameters:
==list:begin==
->[side]:   {@@cxxblas::typedefs#Side}{specifies} the type of
            {@@flens::blas::mm#hermitian}{[mm]} operation.
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::HeMatrix}{Hermitian} matrix [A]
->[B]:      {@@flens::GeMatrix}{General} matrix [B]
->[beta]:   Scaling factor [beta]
->[C]:      {@@flens::GeMatrix}{General} matrix [C]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::hemm}{[cxxblas::gemm]}
-> Matrix [C] gets resized if possible (i.e. if [C] is not a matrix view
   or [beta] equals zero).
==ul:end==


==section:Product of Symmetric and General Matrices#symmetric==
The common interface for this type of operation reads:
==coderef==
template <typename ALPHA, typename MA, typename MB, typename BETA, typename MC>
    void
    mm(cxxblas::Side side,
       const ALPHA &alpha,
       const SymmetricMatrix<MA> &A, const GeneralMatrix<MB> &B,
       const BETA &beta, GeneralMatrix<MC> &C);
====
==ul:begin==
-> Function [mm] computes one matrix-matrix product of the form
-->[$ C  \leftarrow \alpha \, A \, B  + \beta C $] or
-->[$ C  \leftarrow \alpha \, B \, A  + \beta C $]
-> where
--> [A] is a symmetric matrix and [B], [C] are general (i.e. not necessarily
    square or symmetric) matrices.
--> {@@cxxblas::typedefs#Side}{[side==cxxblas::Left]} specifies
    [$ C  \leftarrow \alpha \, A \, B  + \beta C $]
--> {@@cxxblas::typedefs#Side}{[side==cxxblas::Right]} specifies
    [$ C  \leftarrow \alpha \, B \, A  + \beta C $]
==ul:end==
Note that classes {@@flens::GeneralMatrix}{[GeneralMatrix]} and
{@@flens::SymmetricMatrix}{[SymmetricMatrix]} are both abstract.
Function [mm] casts matrices [A], [B] and [C] to their actual implementation
and calls a specialized implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection:SyMatrix-GeMatrix==
For matrices of type {@@flens::SyMatrix} and {@@flens::GeMatrix} the following
specialized interface is provided:
==coderef==
template <typename ALPHA, typename MA, typename MB, typename BETA, typename MC>
    void
    mm(cxxblas::Side side,
       const ALPHA &alpha, const SyMatrix<MA> &A, const GeMatrix<MB> &B,
       const BETA &beta, GeMatrix<MC> &C);
====
Template Types:
==list:begin==
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[MB]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [B]
->[BETA]:       Type of the scaling factor [beta]
->[MC]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [C]
==list:end==

Parameters:
==list:begin==
->[side]:   {@@cxxblas::typedefs#Side}{specifies} the type of
            {@@flens::blas::mm#symmetric}{[mm]} operation.
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::SyMatrix}{Symmetric} matrix [A]
->[B]:      {@@flens::GeMatrix}{General} matrix [B]
->[beta]:   Scaling factor [beta]
->[C]:      {@@flens::GeMatrix}{General} matrix [C]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::symm}{[cxxblas::symm]}
-> Matrix [C] gets resized if possible (i.e. if [C] is not a matrix view
   or [beta] equals zero).
==ul:end==


==section:Product of Triangular  and General Matrices#triangular==
The common interface for this type of operation reads:
==coderef==
template <typename ALPHA, typename MA, typename MB>
    void
    mm(cxxblas::Side side,
       cxxblas::Transpose transA, const ALPHA &alpha,
       const TriangularMatrix<MA> &A,
       GeneralMatrix<MB> &B);
====
==ul:begin==
-> Computation of matrix-matrix products of the forms
--> [$B \leftarrow \alpha \, \text{op}(A) \, B$] or
--> [$B \leftarrow \alpha \,  B \, \text{op}(A)$]
-> where
--> [A] is a triangular and [B] a general (i.e. not necessarily square
    or symmetric) matrix.
--> {@@cxxblas::typedefs#Side}{[side==cxxblas::Left]} specifies
    [$B \leftarrow \alpha \, \text{op}(A) \, B$]
--> {@@cxxblas::typedefs#Side}{[side==cxxblas::Right]} specifies
    [$B \leftarrow \alpha \, B \, \text{op}(A) $]
--> {@@cxxblas::typedefs#Transpose}{[transA]} specifies
    [$\text{op}(A) \in \{A, A^T, A^H\}$].
-> Obviously, in this type of matrix-matrix product matrix [B] gets
   overwritten with the result.
==ul:end==
Note that classes {@@flens::GeneralMatrix}{[GeneralMatrix]} and
{@@flens::TriangularMatrix}{[TriangularMatrix]} are both abstract.
Function [mm] casts matrices [A] and [B] to their actual implementation
and calls a specialized implementation.

Available specialized implementations (i.e. overloaded functions) are listed
in the following.

==subsection:TrMatrix-GeMatrix==
For matrices of type {@@flens::TrMatrix} and {@@flens::GeMatrix} the following
specialized interface is provided:
==coderef==
template <typename ALPHA, typename MA, typename MB>
    void
    mm(cxxblas::Side side,
       cxxblas::Transpose transA, const ALPHA &alpha, const TrMatrix<MA> &A,
       GeMatrix<MB> &B);
====
Template Types:
==list:begin==
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[MB]:         {@@flens::storage#FullStorage}{Full storage scheme} of matrix [B]
==list:end==

Parameters:
==list:begin==
->[side]:   {@@cxxblas::typedefs#Side}{specifies} the type of
            {@@flens::blas::mm#triangular}{[mm]} operation.
->[transA]: Enumeration {@cxxblas::typedefs#Transpose}{constant} specifying the
            type of {@@flens::blas::mm#triangular}{[mm]}
            operation to be performed
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::TrMatrix}{Triangular} matrix [A]
->[B]:      {@@flens::GeMatrix}{Triangular} matrix [B]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::trmm}{[cxxblas::trmm]}
-> Matrix [B] gets overwritten with the result of the operation.
==ul:end==
