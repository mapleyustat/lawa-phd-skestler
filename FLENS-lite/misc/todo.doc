==title:Todo List (Help Appreciated)==

This is just a collection of things I come up with from time to time.  Mostly before I go to bed early in the morning overwhelmed by a bunch of good ideas and depressed by the amount things left to do.  So primarily these are notes for myself.  However, if you are interested in participating feel more than welcome!


==section:Documentation==

==ul:begin==
-> Reading and correcting the documentation.  My language skills are poor. In
   every language.
-> Extend the documentation for understandability.
-> There are plenty of copy-and-past errors:
--> Copying raw-documentation code often results in [an array] becoming
    <b>an</b> [constant array] ...
--> Often I copied complete pages documenting a certain class and used them as
    a template for another class. So there are plenty of cases where the former
    class name was left untouched in the new doc file ...
-> The documentation tool needs a cleanup.
==ul:end==

==section:Coding==

==subsection:Code Reviewing==

==ul:begin==
-> There are many unnecessary includes left from the initial development
   process.  Let us find and remove them!
-> Checking consistency of the interfaces.
--> [Array], [ArrayView], [ConstArrayView] should provide the same interface.
    The same holds for all other storage schemes.
-> Define typedefs [ElementTypes] instead of [T]. Needs to be done in
   [GeMatrix], [HeMatrix], [SyMatrix], [TrMatrix].
-> Index policy
--> [Range] should get a [IndexOption] instead of an [IndexType].  With the
    index option one can specify the first index of views.
--> [Underscore] also should get a [IndexOption] an then serves as a factory
    producing corresponding [Range] types.
--> Write a concept article about index policies.
--> Index options should also specifiy how index ranges behave when resizing or
    copying vectors or matrices. 
-> Code needs to be cleaned up constantly:
--> sorting [includes] alphabetically
--> removing unneeded includes (otherwise we have a hell of dependancies)
--> inserting needed includes.  Sometimes things compile because required stuff
    was already included in an included header file.  Once we change on include
    things break.
-> Check for naming conventions. Let us be pedantic about coding style.  Make it
   a joy reading our code!
-> check: Arithmetic operators ([+,-,*,/,...]) should always return [const]
   objects.
==ul:end==

==subsection:CXXBLAS/CXXLAPACK==

The CXXBLAS and CXXLAPACK part is independent from the FLENS part.  Hence
the interface is pretty clear and stable.  It directly gets derived from
standard BLAS/LAPACK.

==ul:begin==
-> Adding more and more BLAS/LAPACK functions to CXXBLAS/CXXLAPACK
--> Generic implementations and
--> Bindings to native implementations like [ATLAS], [MKL], ...
-> Writing documentation on how-to imeplement CXXBLAS/CXXLAPACK functions
   or bindings.
==ul:end==

==subsection:Missing Features/Reorganizing Code==
==ul:begin==
-> Extend CXXBLAS for [fill] functions
--> Outsource the functionality of [fill] methods in
    {@@flens::Array}, {@@flens::ArrayView}, {@@flens::ConstArrayView}
--> Outsource the functionality of [fill] methods in
    {@@flens::FullStorage}, {@@flens::FullStorageView},
    {@@flens::ConstFullStorageView}
==ul:end==

==subsection:Testing==

==ul:begin==
-> Something like filling matrices/vectors with random numbers would be helpful.
-> Generic CXXBLAS/CXXLAPACK implementations could be tested against native
   BLAS/LAPACK implementations like [ATLAS], [MKL], ...
==ul:end==

==subsection:Extending Concepts-Docs==

==ul:begin==
-> The [TypeInfo] trait was simplified:
-->  Its only purpose is now realizing the multilevel class hierarchy
-->  Every matrix/vector implementation has to define an [ElementType] typedef.
==ul:end==
