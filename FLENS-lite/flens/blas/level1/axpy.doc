==title:blas::axpy{flens::blas::axpy}==
==ul:begin==
-> Computes operations of the form [$y \leftarrow y + \alpha x$] for vectors.
-> Computes operations of the form 
   [$B \leftarrow B + \alpha \, \text{op}(A)$]
   with [$\text{op}(A) \in \{A, A^T, A^H\}$] for matrices.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==

==section:Common Interface==
The common interfaces are defined for both, abstract vector and abstract matrix
types.  In each case the underlying implementation casts the operands to their
actual implementation and calls a specialized (i.e. overloaded) version of
[axpy] (listed in the sections below).

==subsection:Vectors==
For vector operands the common interface reads:
==coderef==
template <typename ALPHA, typename VX, typename VY>
    void
    axpy(const ALPHA &alpha, const Vector<VX> &x, Vector<VY> &y);
====
==ul:begin==
-> Computes operations of the form [$y \leftarrow y + \alpha x$] for vectors.
==ul:end==

==subsection:Matrices==
For matrix operands the common interface reads:
==coderef==
template <typename ALPHA, typename MA, typename MB>
    void
    axpy(cxxblas::Transpose trans,
         const ALPHA &alpha, const Matrix<MA> &A, Matrix<MB> &B);
====
==ul:begin==
-> Computes operations of the form [$B \leftarrow B + \alpha \text{op}(A)$]
   where [A], [B] are matrices.
--> {@@cxxblas::typedefs#Transpose}{[trans]} specifies
    [$\text{op}(A) \in \{A, A^T, A^H\}$]
==ul:end==

==section:DenseVector#DenseVector==
For vectors of type {@@flens::DenseVector} the following specialized interface
is provided:
==coderef==
template <typename ALPHA, typename X, typename Y>
    void
    axpy(const ALPHA &alpha, const DenseVector<X> &x, DenseVector<Y> &y);
====

Template Types:
==list:begin==
->[ALPHA]:      Type of the scaling factor [alpha].
->[VX]:         {@@flens::storage#Array}{Array storage scheme} of vector [x].
->[VY]:         {@@flens::storage#Array}{Array storage scheme} of vector [y].
==list:end==

Parameters
==list:begin==
->[alpha]:  Scaling factor [alpha]
->[x]:      {@@flens::DenseVector}{Dense} vector [x]
->[y]:      {@@flens::DenseVector}{Dense} vector [y]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::axpy}{[cxxblas::axpy]}
-> The length of vector [x] is required to equal the length of vector [y].
==ul:end==

==section:GeMatrix#GeMatrix==
For matrices of type {@@flens::GeMatrix} the following specialized interface
is provided:
==coderef==
template <typename ALPHA, typename MA, typename MB>
    void
    axpy(cxxblas::Transpose trans,
         const ALPHA &alpha, const GeMatrix<MA> &A, GeMatrix<MB> &B);
====

Template Types:
==list:begin==
->[ALPHA]:  Type of the scaling factor [alpha].
->[MA]:     {@@flens::storage#FullStorage}{Full storage scheme} of matrix [A]
->[MB]:     {@@flens::storage#FullStorage}{Full storage scheme} of matrix [B]
==list:end==

Parameters
==list:begin==
->[trans]:  {@@cxxblas::typedefs#Transpose}{Specifies} 
            [$\text{op}(A) \in \{A, A^T, A^H\}$]
->[alpha]:  Scaling factor [alpha]
->[A]:      {@@flens::GeMatrix}{General} matrix [A]
->[B]:      {@@flens::GeMatrix}{General} matrix [B]
==list:end==

Note:
==ul:begin==
-> The implementation calls {@@cxxblas::geaxpy}{[cxxblas::geaxpy]}
-> Dimensions of matrix [B] are required to match corresponding dimensions
   of matrix [A].
==ul:end==
