==title:dot/dotu{cxxblas::dot}==
==ul:begin==
-> Function [dot] computes the dot product of two vectors [x] and [y],
   i.e. [$\bar{x}^T y$].
-> Function [dotu] computes for two vectors [x] and [y] the sum [$x^T y$].
-> Hence, both function will compute the same value if [x] is not complex.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==

==section:Generic Implementation==

==subsection:dot==
For function [dot] the interface of the generic implementation reads:
==coderef==
template <typename IndexType, typename X, typename Y, typename Result>
    void
    dotu(IndexType n, const X *x, IndexType incX, const Y *y, IndexType incY,
         Result &result);
====

==subsection:dotu==
And analogously for function [dotu]
==coderef==
template <typename IndexType, typename X, typename Y, typename Result>
    void
    dot(IndexType n, const X *x, IndexType incX, const Y *y, IndexType incY,
        Result &result);
====

==subsection:Template Types==
==list:begin==
->[IndexType]:      Size and index type for vectors
->[X]:              Element type of vector [x]
->[Y]:              Element type of vector [y]
->[Result]:         Type of the result computed by the functions.
==list:end==

==subsection:Parameters==
==list:begin==
->[n]:      vector lengths (has to be the same for both vectors)
->[x]:      Pointer to the first element of vector [x]
->[incX]:   stride between elements in vector [x]
->[y]:      Pointer to the first element of vector [y]
->[incY]:   stride between elements in vector [y]
->[result]: reference for returning the computed value.
==list:end==

==section:Native BLAS==
==ul:begin==
-> Functions [dot] and [dotu] are overloaded:
--> for vectors with elements of type for [float], [double],
    {@@cxxblas::typedefs#ComplexFloat}{ComplexFloat} and
    {@@cxxblas::typedefs#ComplexFloat}{ComplexDouble}.
--> different return types such that in certain cases extended precision
    accumulation is natively supported.
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:sdot (float, precision accumulated in double)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    sdot(IndexType n, float alpha,
         const float *x, IndexType incX,
         const float *y, IndexType incY,
         float &result);
====
TODO: generic implementation, document above
==ul:begin==
-> {@->http://www.netlib.org/blas/sdsdot.f}{sdsdot (Netlib)}
==ul:end==

==subsection:dot (float, precision accumulated in double)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    dot(IndexType n,
        const float *x, IndexType incX,
        const float *y, IndexType incY,
        double &result);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dsdot.f}{dsdot (Netlib)}
==ul:end==

==subsection:dot (float)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    dot(IndexType n,
        const float *x, IndexType incX,
        const float  *y, IndexType incY,
        float &result);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/sdot.f}{sdot (Netlib)}
==ul:end==

==subsection:dot (double)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    dot(IndexType n,
        const double *x, IndexType incX,
        const double *y, IndexType incY,
        double &result);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/ddot.f}{ddot (Netlib)}
==ul:end==

==subsection:dotu (ComplexFloat)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    dotu(IndexType n,
         const ComplexFloat  *x, IndexType incX,
         const ComplexFloat  *y, IndexType incY,
         ComplexFloat &result);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/cdotu.f}{cdotu (Netlib)}
==ul:end==

==subsection:dot (ComplexFloat)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    dot(IndexType n,
        const ComplexFloat  *x, IndexType incX,
        const ComplexFloat  *y, IndexType incY,
        ComplexFloat &result);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/cdotc.f}{cdotc (Netlib)}
==ul:end==

==subsection:dotu (ComplexDouble)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    dotu(IndexType n,
         const ComplexDouble *x, IndexType incX,
         const ComplexDouble *y, IndexType incY,
         ComplexDouble &result);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/zdotu.f}{zdotu (Netlib)}
==ul:end==

==subsection:dot (ComplexDouble)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    dot(IndexType n,
        const ComplexDouble *x, IndexType incX,
        const ComplexDouble *y, IndexType incY,
        ComplexDouble &result);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/zdotc.f}{zdotc (Netlib)}
==ul:end==

