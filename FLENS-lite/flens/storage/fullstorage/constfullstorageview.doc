==title:ConstFullStorageView{flens::ConstFullStorageView}==

Implementation of a constant full storage scheme without dedicated memory.
References elements from a previously allocated full storage scheme.

==ul:begin==
-> No memory gets allocated.
-> Class [ConstFullStorageView] supports (sub-)views referencing parts
   of the storage scheme. These can be rows, columns or rectangular parts.
-> Class [ConstFullStorageView] is defined in [namespace flens].
-> Browse header file: [@header]
-> Browse implementation: [@tccimpl]
-> Related implementations of the full storage scheme:
--> Class {@flens/storage/fullstorage/fullstorage}{FullStorage}
    implements a full storage scheme with dedicated memory.
--> Class Class {@flens/storage/fullstorage/fullstorageview}{FullStorageView}
    implements a corresponding view type with read-and-write access.
-> Matrix types based on the
   {@flens/storage/storage#FullStorage}{Full Storage Scheme}
   are:
-->  {@flens/matrixtypes/general/impl/gematrix}{GeMatrix}
-->  {@flens/matrixtypes/hermitian/impl/hematrix}{HeMatrix}
-->  {@flens/matrixtypes/symmetric/impl/symatrix}{SyMatrix}
-->  {@flens/matrixtypes/triangular/impl/trmatrix}{TrMatrix}
==ul:end==

==section:Template Parameters==
The declaration of [ConstFullStorageView] reads
==code:.cc==
template <typename T,
          cxxblas::StorageOrder Order = cxxblas::RowMajor,
          typename I = IndexOptions<long>,
          typename A = std::allocator<T> >
    class ConstFullStorageView;
====
with template parameters:
==list:begin==
->[T]:      Element type
->[Order]   {@cxxblas/typedefs#StorageOrder}{Storage Order}
->[I]:      {@flens/storage/indexoptions}{Indexing options}
->[A]:      Some standard conform allocator
==list:end==


==section:Public Typedefs==
The following typedefs are defined:
==list:begin==
->[ElementType]:            Element Type
->[IndexType]:              Index Type
->[Allocator]:              Type of allocator

->[ConstView]:              Constant view for referencing rectangular parts
->[View]:                   View for referencing rectangular parts
->[NoView]:                 Type for storing a copy of a rectangular part.

->[ConstArrayView]:         Constant view for referencing rows or columns.
->[ArrayView]:              View for referencing rows or columns.
->[Array]:                  Type for storing a copy of rows or columns.
==list:end==

==section:Constructors==

==subsection:Construct View from Pointer==
==coderef==
ConstFullStorageView(const ElementType *data,
                     const Allocator &allocator,
                     IndexType numRows, IndexType numCols,
                     IndexType leadingDimension,
                     IndexType firstRow = I::defaultIndexBase,
                     IndexType firstCol = I::defaultIndexBase);
====
Construct a constant full storage view of given dimensions with [data] pointing
to the first referenced element.


==subsection:Copy Constructor==
==coderef==
ConstFullStorageView(const ConstFullStorageView &rhs);
====
Construct a constant full storage scheme referencing [rhs].


==subsection:Construct from Full Storage Scheme==
==coderef==
template <typename RHS>
    ConstFullStorageView(const RHS &rhs);
====
Construct a constant full storage scheme referencing [rhs].

==section:Operators==
==subsection:Element Access==
==coderef==
const ElementType &
operator()(IndexType row, IndexType col) const;
====
Returns element specified by [(row, col)].

==section:Methods==
==subsection:First Valid Row Index==
==coderef==
IndexType
firstRow() const;
====
Returns the first valid row index.

==subsection:Last Valid Row Index==
==coderef==
IndexType
lastRow() const;
====
Returns the last valid row index.

==subsection:First Valid Column Index==
==coderef==
IndexType
firstCol() const;
====
Returns the first valid column index.

==subsection:Last Valid Column Index==
==coderef==
IndexType
lastCol() const;
====
Returns the last valid column index.

==subsection:Number of Rows==
==coderef==
IndexType
numRows() const;
====
Returns the number of rows.

==subsection:Number of Columns==
==coderef==
IndexType
numCols() const;
====
Returns the number of columns.

==subsection:Leading Dimension==
==coderef==
IndexType
leadingDimension() const;
====
Returns the leading dimension.

==subsection:Stride between Row-Elements==
==coderef==
IndexType
strideRow() const;
====
Returns the stride between row elements.

==subsection:Stride between Column-Elements==
==coderef==
IndexType
strideCol() const;
====
Returns the stride between column elements.

==subsection:Pointer to First Element==
==coderef==
const ElementType *
data() const;
====
Returns a const pointer to the first element, i.e. the address of
the element with indices [(firstRow(), firstCol())].

==subsection:Get Allocator in Use==
==coderef==
const Allocator &
allocator() const;
====
Returns the allocator used by the constructor.

==section:Methods for Views==
==subsection:Constant Rectangular View==
==coderef==
const ConstFullStorageView
view(IndexType fromRow, IndexType fromCol,
     IndexType toRow, IndexType toCol,
     IndexType firstViewRow = I::defaultIndexBase,
     IndexType firstViewCol = I::defaultIndexBase) const;
====
Creates and returns a constant view referencing the rectangular part of the
storage scheme specified by [fromRow], [fromCol], [toRow], [toCol].

The index base of the created view gets specified by [firstViewRow]
and [firstViewCol].

==subsection:Constant View of Single Row==
==coderef==
const ConstArrayView
viewRow(IndexType row,
        IndexType firstViewIndex = I::defaultIndexBase) const;
====
Creates and returns a constant array view referencing the specified row
of the full storage scheme.

The index base of the created view gets specified by [firstViewIndex].

==subsection:Constant View of Single Column==
==coderef==
const ConstArrayView
viewCol(IndexType col,
        IndexType firstViewIndex = I::defaultIndexBase) const;
====
Creates and returns an array view referencing the specified row
of the full storage scheme.

The index base of the created view gets specified by [firstViewIndex].

==subsection:Constant View of Single Diagonal==
==coderef==
const ConstArrayView
viewDiag(IndexType d,
         IndexType firstViewIndex = I::defaultIndexBase) const;
====
Creates and returns a constant array view referencing the [d]-th diagonal from 
the full storage scheme.

The index base of the created view gets specified by [firstViewIndex].
