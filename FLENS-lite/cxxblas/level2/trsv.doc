==title:trsv{cxxblas::trsv}==
==ul:begin==
-> Solves one of the systems of equations
--> [$A x = b$] or
--> [$A^T x = b$] or
--> [$A^H x = b$]
-> where [A] is a triangular matrix whose elements are stored in a
   {@@cxxblas::concepts::fullstorage}{full storage scheme}
   either in {@@cxxblas::concepts::storageorder}{row- or column major order}.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==


==section:Generic Implementation==
==ul:begin==
-> Currently CXXBLAS does not provide a generic implementation.
-> Contribute a generic implementation!
==ul:end==


==section:Native BLAS==
==ul:begin==
-> Function [trsv] is overloaded for matrix/vector element types
   [float], [double],
   {@@cxxblas::typedefs#ComplexFloat}{ComplexFloat} and
   {@@cxxblas::typedefs#ComplexFloat}{ComplexDouble}.
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:float==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    trsv(StorageOrder order, StorageUpLo upLo,
         Transpose transA, Diag diag,
         IndexType n,
         const float *A, IndexType ldA,
         float *x, IndexType incX);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/strsv.f}{strsv (Netlib)}
==ul:end==

==subsection:double==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    trsv(StorageOrder order, StorageUpLo upLo,
         Transpose transA, Diag diag,
         IndexType n,
         const double *A, IndexType ldA,
         double *x, IndexType incX);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dtrsv.f}{dtrsv (Netlib)}
==ul:end==

==subsection:ComplexFloat==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    trsv(StorageOrder order, StorageUpLo upLo,
         Transpose transA, Diag diag,
         IndexType n,
         const ComplexFloat *A, IndexType ldA,
         ComplexFloat *x, IndexType incX);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/ctrsv.f}{ctrsv (Netlib)}
==ul:end==

==subsection:ComplexDouble==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    trsv(StorageOrder order, StorageUpLo upLo,
         Transpose transA, Diag diag,
         IndexType n,
         const ComplexDouble *A, IndexType ldA,
         ComplexDouble *x, IndexType incX);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/ztrsv.f}{ztrsv (Netlib)}
==ul:end==

