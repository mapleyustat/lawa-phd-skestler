==title:FullStorageView{flens::FullStorageView}==

Implementation of a full storage scheme without dedicated memory. 
References elements from a previously allocated full storage scheme.

==ul:begin==
-> No memory gets allocated.
-> Class [FullStorageView] supports (sub-)views referencing parts of the storage
   scheme. These can be rows, columns or rectangular parts.
-> Class [FullStorageView] is defined in [namespace flens].
-> Browse header file: [@header]
-> Browse implementation: [@tccimpl]
-> Related implementations of the full storage scheme:
--> Class {@flens/storage/fullstorage/constfullstorageview}{ConstFullStorageView}
    implements a corresponding view type with read-only access.
--> Class {@flens/storage/fullstorage/fullstorage}{FullStorage}
    implements a full storage scheme with dedicated memory.
-> Matrix types based on the
   {@flens/storage/storage#FullStorage}{Full Storage Scheme}
   are:
-->  {@flens/matrixtypes/general/impl/gematrix}{GeMatrix}
-->  {@flens/matrixtypes/hermitian/impl/hematrix}{HeMatrix}
-->  {@flens/matrixtypes/symmetric/impl/symatrix}{SyMatrix}
-->  {@flens/matrixtypes/triangular/impl/trmatrix}{TrMatrix}
==ul:end==


==section:Template Parameters==
The declaration of [FullStorageView] reads
==code:.cc==
template <typename T,
          cxxblas::StorageOrder Order = cxxblas::RowMajor,
          typename I = IndexOptions<long>,
          typename A = std::allocator<T> >
    class FullStorageView;
====
with template parameters:
==list:begin==
->[T]:      Element type
->[Order]   {@cxxblas/typedefs#StorageOrder}{Storage Order}
->[I]:      {@flens/storage/indexoptions}{Indexing options}
->[A]:      Some standard conform allocator
==list:end==


==section:Public Typedefs==
The following typedefs are defined:
==list:begin==
->[ElementType]:            Element Type
->[IndexType]:              Index Type
->[Allocator]:              Type of allocator

->[ConstView]:              Constant view for referencing rectangular parts
->[View]:                   View for referencing rectangular parts
->[NoView]:                 Type for storing a copy of a rectangular part.

->[ConstArrayView]:         Constant view for referencing rows or columns.
->[ArrayView]:              View for referencing rows or columns.
->[Array]:                  Type for storing a copy of rows or columns.
==list:end==

==section:Constructors==

==subsection:Construct View from Pointer==
==coderef==
FullStorageView(ElementType *data, const Allocator &allocator,
                IndexType numRows, IndexType numCols,
                IndexType leadingDimension,
                IndexType firstRow = I::defaultIndexBase,
                IndexType firstCol = I::defaultIndexBase);
====
Construct a full storage view of given dimensions with [data] pointing to the
first referenced element.

==subsection:Copy Constructor==
==coderef==
FullStorageView(const FullStorageView &rhs);
====
Construct a full storage view referencing [rhs].

==subsection:Construct from Full Storage Scheme==
==coderef==
template <typename RHS>
    FullStorageView(RHS &rhs);
====
Construct a full storage view referencing [rhs].

==section:Operators==
==subsection:Element Access (const)==
==coderef==
const ElementType &
operator()(IndexType row, IndexType col) const;
====
Returns element specified by [(row, col)].

==subsection:Element Access==
==coderef==
ElementType &
operator()(IndexType row, IndexType col);
====
Returns element specified by [(row, col)].

==subsection:First Valid Row Index==
==coderef==
IndexType
firstRow() const;
====
Returns the first valid row index.

==subsection:Last Valid Row Index==
==coderef==
IndexType
lastRow() const;
====
Returns the last valid row index.

==subsection:First Valid Column Index==
==coderef==
IndexType
firstCol() const;
====
Returns the first valid column index.

==subsection:Last Valid Column Index==
==coderef==
IndexType
lastCol() const;
====
Returns the last valid column index.

==subsection:Number of Rows==
==coderef==
IndexType
numRows() const;
====
Returns the number of rows.

==subsection:Number of Columns==
==coderef==
IndexType
numCols() const;
====
Returns the number of columns.

==subsection:Leading Dimension==
==coderef==
IndexType
leadingDimension() const;
====
Returns the leading dimension.

==subsection:Stride between Row-Elements==
==coderef==
IndexType
strideRow() const;
====
Returns the stride between row elements.

==subsection:Stride between Column-Elements==
==coderef==
IndexType
strideCol() const;
====
Returns the stride between columns elements.

==subsection:Pointer to First Element (const)==
==coderef==
const ElementType *
data() const;
====
Returns a const pointer to the first element, i.e. the address of the element
with indices [(firstRow(), firstCol())].

==subsection:Pointer to First Element==
==coderef==
ElementType *
data();
====
Returns a pointer to the first element, i.e. the address of the element
with indices [(firstRow(), firstCol())].

==subsection:Get Allocator in Use==
==coderef==
const Allocator &
allocator() const;
====
Returns the allocator used by constructors of corresponding non-views
(i.e. by full storage schemes of type [NoView]).

==subsection:Resize (Given Dimensions)==
==coderef==
bool
resize(IndexType numRows, IndexType numCols,
       IndexType firstRow = I::defaultIndexBase,
       IndexType firstCol = I::defaultIndexBase,
       const ElementType &value = ElementType());
====
If [numRows] does not equal [numRows()] or [numCols] does not equal [numCols()]
an assertion get triggered in DEBUG mode. This is because views can not be
resized.

If [firstRowIndex] does not equal [firstRowIndex()]
or [firstColIndex] does not equal [firstColIndex()]
the index base gets changed by calling
[changeIndexBase(firstRowIndex, firstColIndex)].

==subsection:Resize (Get Dimensions from Given Full Storage Scheme)==
==coderef==
template <typename FS>
    bool
    resize(const FS &rhs, const ElementType &value = ElementType());
====
Calls the [resize] method above with dimensions and index bases from [rhs].

==subsection:Fill==
==coderef==
void
fill(const ElementType &value = ElementType(0));
====
Assigns [value] to all elements in the storage scheme.

==subsection:Change Index Base==
==coderef==
void
changeIndexBase(IndexType firstRow, IndexType firstCol);
====
Changes index bases of rows and columns to [firstRow] and [firstCol]
respectively.

==section:Methods for Views==
==subsection:Constant Rectangular View (const)==
==coderef==
const ConstView
view(IndexType fromRow, IndexType fromCol,
     IndexType toRow, IndexType toCol,
     IndexType firstViewRow = I::defaultIndexBase,
     IndexType firstViewCol = I::defaultIndexBase) const;
====
Creates and returns a constant view referencing the rectangular part
of the full storage scheme specified by [fromRow], [fromCol], [toRow], [toCol].

The index base of the created view gets specified by [firstViewRow]
and [firstViewCol].

==subsection:Rectangular View==
==coderef==
FullStorageView
view(IndexType fromRow, IndexType fromCol,
     IndexType toRow, IndexType toCol,
     IndexType firstViewRow = I::defaultIndexBase,
     IndexType firstViewCol = I::defaultIndexBase);
====
Creates and returns a view referencing the rectangular part
of the full storage scheme specified by [fromRow], [fromCol], [toRow], [toCol].

The index base of the created view gets specified by [firstViewRow]
and [firstViewCol].


==subsection:Constant View of Single Row (const)==
==coderef==
const ConstArrayView
viewRow(IndexType row,
        IndexType firstViewIndex = I::defaultIndexBase) const;
====
Creates and returns a constant array view referencing the specified
row of the full storage scheme.

The index base of the created view gets specified by firstViewIndex.

==subsection:View of Single Row==
==coderef==
ArrayView
viewRow(IndexType row,
        IndexType firstViewIndex = I::defaultIndexBase);
====
Creates and returns an array view referencing the specified
row of the full storage scheme.

The index base of the created view gets specified by firstViewIndex.

==subsection:Constant View of Single Column (const)==
==coderef==
const ConstArrayView
viewCol(IndexType col,
        IndexType firstViewIndex = I::defaultIndexBase) const;
====
Creates and returns a constant array view referencing the specified
column of the full storage scheme.

The index base of the created view gets specified by firstViewIndex.

==subsection:View of Single Column==
==coderef==
ArrayView
viewCol(IndexType col,
        IndexType firstViewIndex = I::defaultIndexBase);
====
Creates and returns an array view referencing the specified
column of the full storage scheme.

The index base of the created view gets specified by firstViewIndex.

==subsection:Constant View of Diagonal (const)==
==coderef==
const ConstArrayView
viewDiag(IndexType d,
         IndexType firstViewIndex = I::defaultIndexBase) const;
====
Creates and returns a constant array view referencing the [d]-th diagonal from 
the full storage scheme.

The index base of the created view gets specified by [firstViewIndex].

==subsection:View of Diagonal==
==coderef==
ArrayView
viewDiag(IndexType d,
         IndexType firstViewIndex = I::defaultIndexBase);
====
Creates and returns anarray view referencing the [d]-th diagonal from 
the full storage scheme.

The index base of the created view gets specified by [firstViewIndex].

