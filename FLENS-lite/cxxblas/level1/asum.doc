==title:asum{cxxblas::asum}==
==ul:begin==
-> Computes the sum of the absolute values of a vector [x].
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==

==section:Generic Implementation==
The interface of the generic implementation reads:

==coderef==
template <typename IndexType, typename X, typename T>
    void
    asum(IndexType n, X *x, IndexType incX, T &absSum);
====

==subsection:Template Types==

==list:begin==
->[IndexType]:      Size and index type for vectors
->[X]:              Element type of vector [x]
->[T]:              Type of the result.
==list:end==

==subsection:Parameters==

==list:begin==
->[n]:        vector lengths (has to be the same for both vectors).
->[x]:        Pointer to the first element of vector [x].
->[incX]:     stride between elements in vector [x].
->[absSum]:   reference for returning the computed value.
==list:end==

==section:Native BLAS==
==ul:begin==
-> Function [asum] is overloaded for [float], [double],
   {@@cxxblas::typedefs#ComplexFloat}{ComplexFloat} and
   {@@cxxblas::typedefs#ComplexFloat}{ComplexDouble}.
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:float==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    asum(IndexType n, const float *x, IndexType incX,
         float &absSum);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/sasum.f}{sasum (Netlib)}
==ul:end==

==subsection:double==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    asum(IndexType n, const double *x, IndexType incX,
         double &absSum);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dasum.f}{dasum (Netlib)}
==ul:end==

==subsection:ComplexFloat==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    asum(IndexType n, const ComplexFloat *x, IndexType incX,
         float &absSum);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/scasum.f}{scasum (Netlib)}
==ul:end==

==subsection:ComplexDouble==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    asum(IndexType n, const ComplexDouble *x, IndexType incX,
         double &absSum);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dzasum.f}{dzasum (Netlib)}
==ul:end==
