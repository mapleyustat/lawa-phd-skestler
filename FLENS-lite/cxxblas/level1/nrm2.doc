==title:nrm2{cxxblas::nrm2}==

==ul:begin==
-> computes the euclidean norm [$\sqrt{x^H x}$] of a vector [x]
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==

==section:Generic Implementation==
The interface of the generic implementation reads:

==coderef==
template <typename IndexType, typename X, typename T>
    void
    nrm2(IndexType n, const X *x, IndexType incX, T &norm);
====

==subsection:Template Types==
==list:begin==
->[IndexType]:  Size and index type for vectors
->[X]:          Element type of vector [x]
->[T]:          Type of the result [norm]
==list:end==

==subsection:Parameters==
==list:begin==
->[n]:      vector lengths (has to be the same for both vectors)
->[x]:      Pointer to the first element of vector [x]
->[incX]:   stride between elements in vector [x]
->[norm]:   reference for returning the computed value.
==list:end==


==section:Native BLAS==
==ul:begin==
-> Function [nrm2] is overloaded for [float], [double],
   {@@cxxblas::typedefs#ComplexFloat}{ComplexFloat} and
   {@@cxxblas::typedefs#ComplexFloat}{ComplexDouble}.
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:float==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    nrm2(IndexType n, const float *x, IndexType incX,
         float &norm);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/snrm2.f}{snrm2 (Netlib)}
==ul:end==

==subsection:double==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    nrm2(IndexType n, const double *x, IndexType incX,
         double &norm);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dnrm2.f}{dnrm2 (Netlib)}
==ul:end==

==subsection:ComplexFloat==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    nrm2(IndexType n, const ComplexFloat *x, IndexType incX,
         float &norm);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/scnrm2.f}{scnrm2 (Netlib)}
==ul:end==

==subsection:ComplexDouble==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    nrm2(IndexType n, const ComplexDouble *x, IndexType incX,
         double &norm);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dznrm2.f}{dznrm2 (Netlib)}
==ul:end==
