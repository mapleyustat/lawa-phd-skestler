==title:Views{concept::View}==

==ul:begin==
-> Purpose: Implement references for matrices and vectors.
-> Demonstrated for {@@flens::DenseVector}{dense vector} types.
==ul:end==

==section:References in C++==
Here some notes and example about references that were adopted from
{@->http://www2.research.att.com/~bs/C++.html}{Stroustrup's <i>C++ Programming Language</i>}
==ul:begin==
-> A <i>reference</i> is an alternative name for an object
==ul:end==
==code:.cc==
int i = 1;
int &r = i;         // r and i now refer to the same int
int x = r;          // x = 1

r = 2;              // i = 2
====
==ul:begin==
-> References are names for something.
-> Hence, there are no uninitialized references.
==ul:end==
==code:.cc==
int i = 1;
int &r1 = i;        // ok: r1 initialized
int &r2;            // error: initializer missing
extern int &r3;     // ok: r3 initialized somewhere
====
==ul:begin==
-> Initializing of a reference is something quite different from
   assignment to it
-> In particular:
--> A reference always refers to the object it was initialized to denote
==ul:end==
==code:.cc==
int i = 1;
int j = 2;

int &r = i;         // initializing: r and i now refer to the same int
r = j;              // assignment:   i = j  (r still refers to i!)
====
==ul:begin==
-> Operators do not operate on the reference but on the referred object:
==ul:end==
==code:.cc==
int i = 0;
int &r = i;
++r;                // i is incremented to 1
====
==ul:begin==
-> You can think of references as pointers that are automatically
   dereference each time you use them (this is actually how they are realized
   in practice).
-> You also should consider references as distinct types (this is clear if you
   think of them as pointers):
--> [int] (integer type)
--> [int &] (integer reference)
--> [const int &] (constant integer reference)
==ul:end==

==section:View Counterpart in FLENS==
For the sake of simplicity we consider only {@@flens::DenseVector}{dense vectors}
and assume the following typedef:
==code:.cc==
typedef flens::DenseVector<Array<double> >     DenseVector;
====
Then
==ul:begin==
-> [DenseVector::View] plays the role of a reference and
-> [DenseVector::ConstView] of a const reference.
==ul:end==
and the semantic of the following code segment readily becomes evident:
==code:.cc==
DenseVector x(5);               // define x as vector of length 5
x = 1, 2, 3, 4, 5;              // initialize it

DenseVector::View r = x;        // r and x now refer to the same vector

DenseVector y = r;              // same as y = x, that means
                                // values of y are  1, 2, 3, 4, 5

r = 5, 4, 3, 2, 1;              // same as: x = 5, 4, 3, 2, 1;
====

==section:Implementation Details==

==ul:begin==
-> The key for our implementation is using the {@@concept::BridgePattern}
   for matrix/vector types that are supporting views.
-> {@@flens::DenseVector}{Dense vectors} can be defined based on
   different engines:
--> {@@flens::Array}{[Array]}
--> {@@flens::ArrayView}{[ArrayView]}
--> {@@flens::ConstArrayView}{[ConstArrayView]}
-> {@@flens::GeMatrix}{General matrices} with
   {@@flens::storage#FullStorage}{full storage} on
--> {@@flens::FullStorage}{[FullStorage]}
--> {@@flens::FullStorageView}{[FullStorageView]}
--> {@@flens::ConstFullStorageView}{[ConstFullStorageView]}
-> ...
==ul:end==

==section:Other Sources Referring to This Page==