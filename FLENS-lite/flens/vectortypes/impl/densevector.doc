==title:DenseVector{flens::DenseVector}==

Implementation of a dense vector type around an
{@flens/storage/storage#Array}{Array Storage Scheme} using the
{@flens/concepts/bridgepattern}{bridge pattern}.

==ul:begin==
-> Class [DenseVector] is derived from class {@@flens::Vector}:
==latex==
\begin{figure}[h]
    \centering
    \psset{xunit=0.95cm,yunit=0.95cm}
    \begin{pspicture}(0,0)(5,3)
    \rput(0,0){\textcolor{white}{.}}
    \rput(5,3){\textcolor{white}{.}}

    \psframe(0,2)(4,3)
    \rput(2,2.5){Vector}

    \psline{->}(2,1)(2,2)
    \psframe(0,0)(4,1)
    \rput(2,0.5){DenseVector}

    \end{pspicture}
\end{figure}
====

-> Class [DenseVector] is defined in [namespace flens].

-> Class [DenseVector] supports {@@concept::View}{views}.

-> Class [DenseVector] supports element access with {@@flens::Scalar} valued
   indices like for instance {@@flens::IndexVariable}.

-> Browse header file: [@header]

-> Browse implementation: [@tccimpl]
==ul:end==


==section:Template Parameters==
The declaration of [DenseVector] reads
==code:.cc==
template <typename A>
    class DenseVector;
====
with template parameter [A] specifying
an {@flens/storage/storage#Array}{Array Storage Scheme}.

==section:Public Typedefs==

The following typedefs are defined:
==list:begin==
->[ElementType]:            Element type
->[IndexType]:              Index type
->[ConstView]:              Type of a constant view for referencing parts of
                            this vector
->[View]:                   Type of a view for referencing parts of this vector
->[NoView]:                 Type of a vector for storing a copy of this vector
                            or parts of this vector.

->[IndexVariable]:          Index type for stencil notations
                            (cf. {@@flens::IndexVariable},
                             see {@tutorial/session01/page03}{example}).
->[ConstElementClosure]:    Constant element type in stencil notation
                            (cf. {@@flens::densevector::ConstElementClosure}).
->[ElementClosure]:         Element type in stencil notation
                            (cf. {@@flens::densevector::ElementClosure}).
==list:end==

==section:Constructors==

==subsection:Empty Vectors==
==coderef==
DenseVector();
====
    Constructs an empty vector.

==subsection:Vector of Given Size (and Default Index Base)==
==coderef==
explicit
DenseVector(IndexType length);
====
    Constructs a dense vector of given [length].

    The index base of the view depends on the {@@flens::IndexOptions} used for
    the underlying 
    {@flens/storage/storage#Array}{Array Storage Scheme}.

==subsection:Vector of Given Size and Given Index Base==
==coderef==
DenseVector(IndexType length, IndexType firstIndex);
====
    Constructs a dense vector of given [length] and index base specified
    by [firstIndex].

==subsection:Vector of Given Range==
==coderef==
DenseVector(const Range<IndexType> &range);
====
    Constructs a dense vector with index range specified by
    {@@flens::Range}{range}.

==subsection:Initialize with an Array Storage Scheme==
==coderef==
DenseVector(const A &array);
====
    Constructs a dense vector from a given
    {@flens/storage/storage#Array}{Array Storage Scheme}.

==subsection:Copy Constructor==
==coderef==
DenseVector(const DenseVector &rhs);
====
    Constructs a dense vector from a given [DenseVector].

==subsection:Construct from DenseVector with Different Storage Scheme==
==coderef==
template <typename RHS>
    DenseVector(const DenseVector<RHS> &rhs);
====
    Constructs a dense vector from [rhs] which is a dense vector based on a
    different storage scheme.
    Requires that storage scheme [RHS] can be converted to [A].

==subsection:Construct from non-constant DenseVector with Different Storage Scheme==
==coderef==
template <typename RHS>
    DenseVector(DenseVector<RHS> &rhs);
====
    Constructs a dense vector from [rhs] which is a dense vector based on a
    different storage scheme.
    Requires that storage scheme [RHS] can be converted to [A].

    This constructor is needed for instance when non-const views are created from
    regular vectors:
==code:.cc==
typedef DenseVector<Array<double> >         Vector;
typedef DenseVector<ArrayView<double> >     VectorView;

Vector       x(5);
VectorView   y = x;  // calls the above constructor
====

==subsection:Construct from Vector==
==coderef==
template <typename RHS>
    DenseVector(const Vector<RHS> &rhs);
====
    Constructs a dense vector from [rhs] which can be any vector derived from base
    class {@@flens::Vector}.
    Requires that an appropriate {@@flens::blas::copy} function exists for
    initialization.

    I.e. the constructor must be able to initialize itself by
    calling [blas::copy(rhs.impl(), *this)].


==section:Operators==

==subsection:Fill (Assignment of a Scalar Value)==
==coderef==
Initializer
operator=(const ElementType &value);
====
    Fills the vector with [value].

    Also serves as list initializer
    (see {@tutorial/session01/page02}{example} and
     class {@@flens::densevector::Initializer}).

==subsection:Copy (Assignment of a DenseVector)==
==coderef==
DenseVector &
operator=(const DenseVector &rhs);
====
    Copies elements of [rhs] by calling
    {@@flens::blas::copy#DenseVector}{blas::copy(rhs, *this)}. The vector
    might get resized.
    
    Wether resizing is possible depends on the underlying storage
    scheme.  If not, an assertion get triggered.

==subsection:Copy (Assignment of a Vector)==
==coderef==
template <typename RHS>
    DenseVector &
    operator=(const Vector<RHS> &rhs);
====
    Copies elements of [rhs] by calling
    {@@flens::blas::copy}{blas::copy(rhs, *this)}. Requires that
    an appropriate [copy] function exists for the implementation of [rhs].
    Hence the vector might get resized  (whether this is possible depends on the
    underlying storage scheme).

==subsection:Plus-Assign==
==coderef==
template <typename RHS>
    DenseVector &
    operator+=(const Vector<RHS> &rhs);
====
    Adds vector [rhs].  Requires that an appropriate {@@flens::blas::axpy} function exists 
    for the implementation of [rhs].

==subsection:Minus-Assign==
==coderef==
template <typename RHS>
    DenseVector &
    operator-=(const Vector<RHS> &rhs);
====
    Substracts vector [rhs].  Requires that an appropriate {@@flens::blas::axpy} function
    exists for the implementation of [rhs].

==subsection:Component-wise Multiplication (Scaling)==
==coderef==
DenseVector &
operator*=(const ElementType &alpha);
====
    Multiplies all elements by [alpha]. Calls function
    {@@flens::blas::scal#DenseVector}{blas::scal}.

==subsection:Component-wise Division (Scaling)==
==coderef==
DenseVector &
operator/=(const ElementType &alpha);
====
    Divides all elements by [alpha]. Calls function
    {@@flens::blas::scal#DenseVector}{blas::scal}.

==subsection:Element Access (const)==
==coderef==
const ElementType &
operator()(IndexType index) const;
====
    Returns the element specified by [index].

==subsection:Element Access==
==coderef==
ElementType &
operator()(IndexType index);
====
    Returns the element specified by [index].

==subsection:Element Access with Stencil Notation (const)==
==coderef==
template <typename S>
    const densevector::ConstElementClosure<DenseVector,
                                           typename Scalar<S>::Impl>
    operator()(const Scalar<S> &indexVariable) const;
====
    Returns a constant closure encapsulating
    {@@flens::Scalar}{indexVariable} and the vector itself.

    Cf. {@@flens::IndexVariable}, {@@flens::densevector::ElementClosure}
    and see {@tutorial/session01/page03}{example}.

==subsection:Element Access with Stencil Notation (const)==
==coderef==
const ConstElementClosure
operator()(const IndexVariable &indexVariable) const;
====
    Returns a constant closure encapsulating
    {@@flens::IndexVariable}{indexVariable} and the vector itself.  

    Cf. {@@flens::IndexVariable}, {@@flens::densevector::ElementClosure}
    and see {@tutorial/session01/page03}{example}.

==subsection:Element Access with Stencil Notation==
==coderef==
ElementClosure
operator()(IndexVariable &indexVariable);
====
    Returns a closure encapsulating {@@flens::IndexVariable}{indexVariable}
    and the vector itself.  
    
    Cf. {@@flens::IndexVariable}, {@@flens::densevector::ElementClosure}
    and see {@tutorial/session01/page03}{example}.

==section:Views==

==subsection:Creation of Const Views==
==coderef==
ConstView
operator()(const Range<IndexType> &range) const;
====
    Creates and returns a constant vector view.  The returned vector view will
    reference the elements specified by {@@flens::Range}{range}.
    
    The index base of the view depends on the {@@flens::IndexOptions} used for
    the underlying {@flens/storage/array}{array} storage scheme.

==subsection:Creation of Views==
==coderef==
View
operator()(const Range<IndexType> &range);
====
    Creates and returns a vector view.  The returned vector view will
    reference the elements specified by {@@flens::Range}{range}.

    The index base of the view depends on the {@@flens::IndexOptions} used for
    the underlying {@flens/storage/array}{array} storage scheme.

==subsection:Creation of Const Views with Arbitrary Index Base====
==coderef==
ConstView
operator()(const Range<IndexType> &range,
           IndexType firstViewIndex) const;
====
    Creates and returns a constant vector view.  The returned vector view will
    reference the elements specified by {@@flens::Range}{range}.

    The index base of the view gets specified by [firstViewIndex].

==subsection:Creation of Views with Arbitrary Index Base====
==coderef==
View
operator()(const Range<IndexType> &range, IndexType firstViewIndex);
====
    Creates and returns a vector view.  The returned vector view will
    reference the elements specified by {@@flens::Range}{range}.

    The index base of the view gets specified by [firstViewIndex].


==section:Methods==
==subsection:First Index====
==coderef==
IndexType
firstIndex() const;
====
    Returns the first valid index.

==subsection:Last Index====
==coderef==
IndexType
lastIndex() const;
====
    Returns the last valid index.

==subsection:Length====
==coderef==
IndexType
length() const;
====
    Returns the vector length.

==section:Accessing the Implementation==
==subsection:Accessing the Storage Scheme (const)#engine====
==coderef==
const A &
engine() const;
====
    Returns a constant reference to the underlying storage scheme.

==subsection:Accessing the Storage Scheme====
==coderef==
A &
engine();
====
    Returns a reference to the underlying storage scheme.
