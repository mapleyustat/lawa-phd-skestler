==title:gemm{cxxblas::gemm}==
==ul:begin==
-> Computation of matrix-matrix products.
-> More precisely, function [gemm] computes matrix-matrix products of the
   form
   ==latex==
   C  \leftarrow \alpha \, \text{op}(A) \, \text{op}(B)  + \beta C
   ====
   with:
--> [$\text{op}(A) \in \{A, A^T, A^H\}$] and
    [$\text{op}(B) \in \{B, B^T, B^H\}$].
--> Matrices [A], [B] and [C] are all general (i.e. not necessarily square
    or symmetric) matrices where elements are stored in a
    {@@cxxblas::concepts::fullstorage}{full storage scheme}
    either in {@@cxxblas::concepts::storageorder}{row- or column major order}.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==


==section:Generic Implementation==
==ul:begin==
-> Currently CXXBLAS does not provide a generic implementation.
-> Contribute a generic implementation!
==ul:end==


==section:Native BLAS==
==ul:begin==
-> Function [gemm] is overloaded for [float], [double],
   {@@cxxblas::typedefs#ComplexFloat}{[ComplexFloat]} and
   {@@cxxblas::typedefs#ComplexFloat}{[ComplexDouble]}.
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:float==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemm(StorageOrder order,
         Transpose transA, Transpose transB,
         IndexType m, IndexType n, IndexType k,
         float alpha,
         const float *A, IndexType ldA,
         const float *B, IndexType ldB,
         float beta,
         float *C, IndexType ldC);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/sgemm.f}{sgemm (Netlib)}
==ul:end==

==subsection:double==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemm(StorageOrder order,
         Transpose transA, Transpose transB,
         IndexType m, IndexType n, IndexType k,
         double alpha,
         const double *A, IndexType ldA,
         const double *B, IndexType ldB,
         double beta,
         double *C, IndexType ldC);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dgemm.f}{dgemm (Netlib)}
==ul:end==

==subsection:ComplexFloat==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemm(StorageOrder order,
         Transpose transA, Transpose transB,
         IndexType m, IndexType n, IndexType k,
         const ComplexFloat &alpha,
         const ComplexFloat *A, IndexType ldA,
         const ComplexFloat *B, IndexType ldB,
         const ComplexFloat &beta,
         ComplexFloat *C, IndexType ldC);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/cgemm.f}{cgemm (Netlib)}
==ul:end==

==subsection:ComplexDouble==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemm(StorageOrder order,
         Transpose transA, Transpose transB,
         IndexType m, IndexType n, IndexType k,
         const ComplexDouble &alpha,
         const ComplexDouble *A, IndexType ldA,
         const ComplexDouble *B, IndexType ldB,
         const ComplexDouble &beta,
         ComplexDouble *C, IndexType ldC);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/zgemm.f}{zgemm (Netlib)}
==ul:end==
