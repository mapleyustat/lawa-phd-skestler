==title:rot{cxxblas::rot}==

==ul:begin==
-> [rot] applies a Given's rotation constructed by [rotg]
-> [rotg] constructs a Given's rotation
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==


==section:Generic Implementation==
==ul:begin==
-> Currently CXXBLAS does not provide a generic implementation.
-> Contribute a generic implementation!
==ul:end==


==section:Native BLAS==
==ul:begin==
-> Function [asum] is overloaded for [float], [double],
   {@@cxxblas::typedefs#ComplexFloat}{ComplexFloat} and
   {@@cxxblas::typedefs#ComplexFloat}{ComplexDouble}.
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:rot (float)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    rot(IndexType n,
        float *x, IndexType incX,
        float *y, IndexType incY,
        float c, float s);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/srot.f}{srot (Netlib)}
==ul:end==

==subsection:rot (double)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    rot(IndexType n,
        double *x, IndexType incX,
        double *y, IndexType incY,
        double c, double s);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/drot.f}{drot (Netlib)}
==ul:end==

==subsection:rotg (float)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    rotg(float &a, float &b, float &c, float &s);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/srotg.f}{srotg (Netlib)}
==ul:end==

==subsection:rotg (double)==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    rotg(double &a, double &b, double &c, double &s);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/drotg.f}{drotg (Netlib)}
==ul:end==

