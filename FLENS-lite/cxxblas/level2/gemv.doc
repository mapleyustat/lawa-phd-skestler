==title:gemv{cxxblas::gemv}==
==ul:begin==
-> Computation of matrix-vector products.
-> More precisely, function [gemv] computes matrix-vector products of the
   form
--> [$y \leftarrow \beta y + \alpha A x$]
--> [$y \leftarrow \beta y + \alpha A^T x$]
--> [$y \leftarrow \beta y + \alpha A^H x$]
-> Matrix [A] is a general (i.e. not necessarily square or symmetric) matrix
   whose elements are stored in a
   {@@cxxblas::concepts::fullstorage}{full storage scheme}
   either in {@@cxxblas::concepts::storageorder}{row- or column major order}.
-> Source code:
--> Browse header file: [@header]
--> Browse implementation: [@tccimpl]
==ul:end==


==section:Generic Implementation==
For function [gemv] the interface of the generic implementation reads:
==coderef==
template <typename IndexType, typename ALPHA, typename MA, typename VX,
          typename BETA, typename VY>
    void
    gemv(StorageOrder order, Transpose trans,
         IndexType m, IndexType n,
         const ALPHA &alpha,
         const MA *A, IndexType ldA,
         const VX *x, IndexType incX,
         const BETA &beta,
         VY *y, IndexType incY);
====

==subsection:Template Types==
==list:begin==
->[IndexType]:  Size and index type for matrix [A] and vectors [x], [y]
->[ALPHA]:      Type of the scaling factor [alpha]
->[MA]:         Type of elements in matrix [A]
->[VX]:         Type of elements in vector [x]
->[BETA]:       Type of the scaling factor [beta]
->[VY]:         Type of elements in vector [y]
==list:end==

==subsection:Arguments==
==list:begin==
->[order]:  {@@cxxblas::typedefs#StorageOrder}{Enum constant} specifying the 
            {@@cxxblas::concepts::storageorder}{storage order} of matrix [A]
->[trans]:  {@@cxxblas::typedefs#Transpose}{Enum constant} specifying the type
            of operation to be performed.
->[m]:      Number of rows of matrix [A]
->[n]:      Number of columns of matrix [A]
->[alpha]:  scaling factor [alpha]
->[A]:      Pointer to the first element of matrix [A]
->[ldA]:    {@@cxxblas::concepts::fullstorage#LeadingDimension}{Leading dimension}
            of matrix [A]
->[x]:      Pointer to the first element of vector [x]
->[incX]:   stride between elements in vector [x]
->[beta]:   scaling factor [beta]
->[y]:      Pointer to the first element of vector [y]
->[incY]:   stride between elements in vector [y]
==list:end==


==section:Native BLAS==
==ul:begin==
-> Function [gemv] is overloaded for [float], [double],
   {@@cxxblas::typedefs#ComplexFloat}{ComplexFloat} and
   {@@cxxblas::typedefs#ComplexFloat}{ComplexDouble}.
-> The {@@cxxblas::typedefs}{[If<IndexType>]} trait ensures that native BLAS
   bindings are accessible for all compatible index types.
==ul:end==

==subsection:float==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemv(StorageOrder order, Transpose trans,
         IndexType m, IndexType n,
         float alpha,
         const float *A, IndexType ldA,
         const float *x, IndexType incX,
         float beta,
         float *y, IndexType incY);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/sgemv.f}{sgemv (Netlib)}
==ul:end==

==subsection:double==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemv(StorageOrder order, Transpose trans,
         IndexType m, IndexType n,
         double alpha,
         const double *A, IndexType ldA,
         const double *x, IndexType incX,
         double beta,
         double *y, IndexType incY);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/dgemv.f}{dgemv (Netlib)}
==ul:end==

==subsection:ComplexFloat==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemv(StorageOrder order, Transpose trans,
         IndexType m, IndexType n,
         ComplexFloat &alpha,
         const ComplexFloat *A, IndexType ldA,
         const ComplexFloat *x, IndexType incX,
         ComplexFloat &beta,
         ComplexFloat *y, IndexType incY);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/cgemv.f}{cgemv (Netlib)}
==ul:end==

==subsection:ComplexDouble==
==coderef==
template <typename IndexType>
    typename If<IndexType>::isBlasCompatibleInteger
    gemv(StorageOrder order, Transpose trans,
         IndexType m, IndexType n,
         ComplexDouble &alpha,
         const ComplexDouble *A, IndexType ldA,
         const ComplexDouble *x, IndexType incX,
         ComplexDouble &beta,
         ComplexDouble *y, IndexType incY);
====
==ul:begin==
-> {@->http://www.netlib.org/blas/zgemv.f}{zgemv (Netlib)}
==ul:end==
